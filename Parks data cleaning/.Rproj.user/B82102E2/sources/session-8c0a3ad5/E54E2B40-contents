---
title: "Best practices"
root: ../..
layout: lesson
---


# How can I write R code that other people can understand and use?

1. Header information: put metainfo on the code into the first few lines of the file as comments. Include who, when, what, how the code fits within a larger program (if appropriate), possibly the versions of R and key packages that you wrote this for

2. Indentation: do this systematically (your editor can help here). This helps you and others to read and understand the code and can help in detecting errors in your code because it can expose lack of symmetry.

3. Whitespace: use a lot of it. Some places where it is good to have it are (1) around operators (assignment and arithmetic), (2) between function arguments and list elements, (3) between matrix/array indices, in particular for missing indices.

4. 2. Keep your code in bite-sized chunks. If a single function or loop gets too long, consider looking for ways to break it into smaller pieces. Use blank lines to separate blocks of code and comments to say what the block does. 

5. Split long lines at meaningful places.

6. Use parentheses for clarity even if not needed for order of operations. For example, a/y*x will work but is not easy to read and you can easily induce a bug if you forget the order of ops.

7. Documentation - add lots of comments (but don’t belabor the obvious). Remember that in a few months, you may not follow your own code any better than a stranger. Some key things to document: (1) summarizing a block of code, (2) explaining a very complicated piece of code (3) explaining arbitrary constant values. Use full references if you are cited a method.

8. For large projects break code into separate files with meaningful file names and related functions grouped within a file.

9. Use a consistent style within your code. For example, name all matrices something ending in `_mat`. Consistency makes code easier to read and problems easier to spot. Use a seperate naming scheme for functions vs. objects.  

11. Try to have the names be informative without being overly long.

12. Use active names for functions (e.g., calcLogLik, calc_logLik)

13 . Don't repeat yourself. If you are repeating the same code over and over, use a loop or a function to repeat that code for you. Needless repetition doesn't just waste time--it also increases the likelihood you'll make a costly mistake :( 

14. Don’t overwrite names of objects/functions that already exist in R. E.g., don’t use ’lm’.
```{r eval=FALSE}
exists(lm)
```

15. Keep all of your source files for a project in the same directory, then use relative paths as necessary to access them. For example, use

```{r relpath, eval=FALSE}
dat <- read.csv(file = "files/dataset-2013-01.csv", header = TRUE)
```

rather than:

```{r abspath, eval=FALSE}
dat <- read.csv(file = "/Users/Osmia/Documents/sannic-project/files/dataset-2013-01.csv", header = TRUE)
```

16. R can run into memory issues. It is a common problem to run out of memory after running R scripts for a long time. To inspect the objects in your current R environment, you can list the objects, search current packages, and remove objects that are currently not in use. A good practice when running long lines of computationally intensive code is to remove temporary objects after they have served their purpose. However, sometimes, R will not clean up unused memory for a while after you delete objects. You can force R to tidy up its memory by using `gc()`.

```{r gc_ex, eval=FALSE}
# Sample dataset of 1000 rows
interim_object <- data.frame(rep(1:100, 10),
                             rep(101:200, 10),
                             rep(201:300, 10))
object.size(interim_object) # Reports the memory size allocated to the object
rm("interim_object") # Removes only the object itself and not necessarily the memory allotted to it
gc() # Force R to release memory it is no longer using
ls() # Lists all the objects in your current workspace
rm(list = ls()) # If you want to delete all the objects in the workspace and start with a clean slate
```

17. Don't save a session history (the default option in R, when it asks if you want an `RData` file). Instead, start in a clean environment so that older objects don't remain in your environment any longer than they need to. If that happens, it can lead to unexpected results.

18. Collaborate. Grab a buddy and practice "code review". Review is used for preparing experiments and manuscripts; why not use it for code as well? Our code is also a major scientific achievement and the product of lots of hard work!

19. Develop your code using version control and frequent updates!

---

### Keep track of who wrote your code and its intended purpose

Starting your code with an annotated description of what the code does when it is run will help you when you have to look at or change it in the future. Just one or two lines at the beginning of the file can save you or someone else a lot of time and effort when trying to understand what a particular script does.

```{r comment1}
# This is code to replicate the analyses and figures from my 2014 Science
# paper. Code developed by Sarah Supp, Tracy Teal, and Jon Borelli
```

### Be explicit about the requirements and dependencies of your code

Loading all of the packages that will be necessary to run your code (using `library`) is a nice way of indicating which packages are necessary to run your code. It can be frustrating to make it two-thirds of the way through a long-running script only to find out that a dependency hasn't been installed.

```{r loadpkgs, eval=FALSE}
library(ggplot2)
library(reshape)
library(vegan)
```
Another way you can be explicit about the requirements of your code and improve it's reproducibility is to limit the "hard-coding" of the input and output files for your script. If your code will read in data from a file, define a variable early in your code that stores the path to that file. For example

```{r, eval=FALSE}
input_file <- "data/data.csv" 
output_file <- "data/results.csv"
# read input
input_data <- read.csv(input_file)
# get number of samples in data
sample_number <- nrow(input_data)
# generate results
results <- some_other_function(input_file, sample_number)
# write results
write.table(results, output_file)
```

It is also worth considering what the working directory is. If the working directory must change, it is best to do that at the beginning of the script.

### Be careful when using `setwd()`
>
> One should exercise caution when using `setwd()`. Changing directories in a script file can limit reproducibility:
> * `setwd()` will return an error if the directory to which you're trying to change doesn't exist or if the user doesn't have the correct permissions to access that directory. This becomes a problem when sharing scripts between users who have organized their directories differently.
> * If/when your script terminates with an error, you might leave the user in a different directory than the one they started in, and if they then call the script again, this will cause further problems. If you must use `setwd()`, it is best to put it at the top of the script to avoid these problems.
> The following error message indicates that R has failed to set the working directory you specified:
> ```
> Error in setwd("~/path/to/working/directory") : cannot change working directory
> ```
> It is best practice to have the user running the script begin in a consistent directory on their machine and then use relative file paths from that directory to access files (see below).
### Identify and segregate distinct components in your code

It's easy to annotate and mark your code using `#` or `#-` to set off sections of your code and to make finding specific parts of your code easier. For example, it's often helpful when writing code to separate the function definitions. If you create only one or a few custom functions in your script, put them toward the top of your code. If you have written many functions, put them all in their own .R file and then `source` those files. `source` will define all of these functions so that your code can make use of them as needed. 

```{r source_ex, eval=FALSE}
source("my_genius_fxns.R")
```

