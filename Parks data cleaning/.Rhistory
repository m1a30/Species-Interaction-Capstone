# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if(!is.na(data[row, 'TOPFR']) & !is.na(data[row, 'SIDEFR'])){
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - data[row, "TOPFR"]) * data[row, 'SIDEFR']))
}
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
nav_and_collom_only_sem[9, "TOTALFR"]
# only want to apply the function to NAV and COLLOM
nav_and_collom <- c("NAVSQU", "COLLOM")
###
# modifying TOTAL.FR to TOTALFR for fxn to work
# new name = old name
sem_focals_dat <- sem_focals_dat %>% rename(TOTALFR = TOTAL.FR)
# filtering dataframe for just nav and collom
nav_and_collom_only_sem <-  sem_focals_dat[sem_focals_dat$SPECIES %in% nav_and_collom, ]
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
nav_and_collom_only_sem
nav_and_collom_only_sem[9, "TOPFR"]
nav_and_collom_only_sem[8, "TOPFR"]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
wir_focals_dat <- read.csv("focals/wir fitness(WIR diverse focals).csv")
wir_neighborhoods_data <- read.csv("neighborhoods/wir fitness(WIR neighborhoods).csv")
br_focals_dat <- read.csv("focals/br fitness(BR diverse focals).csv")
br_neighborhoods_data <- read.csv("neighborhoods/br fitness(BR neighborhoods).csv")
sem_focals_dat <- read.csv("focals/sem fitness(SEM diverse focals.csv")
sem_neighborhoods_data <- read.csv("neighborhoods/sem fitness(sem neighborhoods).csv")
rf_focals_dat <- read.csv("focals/riverfront fitness(Riverfront Diverse focals).csv")
rf_neighborhoods_data <- read.csv("neighborhoods/riverfront fitness(RIVERFRONT neighborhoods.csv")
fix_col_names <- function(data){
#setting column names to values of 1st row
colnames(data) <- data [1, ]
# removing 1st row
data <- data[-1,]
return (data)
}
wir_neighborhoods_data <- fix_col_names(wir_neighborhoods_data)
sem_neighborhoods_data <- fix_col_names(sem_neighborhoods_data)
rf_neighborhoods_data <- fix_col_names(rf_neighborhoods_data)
br_neighborhoods_data <- fix_col_names(br_neighborhoods_data)
# filtering the neighborhoods so that we keep only the ones that have focal collects
# to be merged with the focal data
sem_neighbors_filtered <- sem_neighborhoods_data[sem_neighborhoods_data$`focal collect?` == "Y", ]
# wir doesn't have a 'focal collect' column
# rf also doesn't have a 'focal collect' column
# unique(br_neighborhoods_data$`focal collect?`), br focal collect column is just blanks ("")
# Use the function
colnames(sem_focals_dat)
unique(sem_focals_dat$NOTES)
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if(!is.na(data[row, 'TOPFR']) & !is.na(data[row, 'SIDEFR'])){
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - data[row, "TOPFR"]) * data[row, 'SIDEFR']))
}
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
nav_and_collom_only_sem[8, "TOPFR"]
nav_and_collom_only_sem[2, "TOPFR"]
nav_and_collom_only_sem[65, "TOPFR"]
nav_and_collom_only_sem[30, "TOPFR"]
nav_and_collom_only_sem[nrow, "TOPFR"]
nav_and_collom_only_sem[nrows, "TOPFR"]
nav_and_collom_only_sem[nrow(nav_and_collom_only_sem$TOPFR), "TOPFR"]
nrow(nav_and_collom_only_sem$TOPFR)
nav_and_collom_only_sem
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if(!is.na(data[row, 'TOPFR']) & !is.na(data[row, 'SIDEFR'])){
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
# only want to apply the function to NAV and COLLOM
nav_and_collom <- c("NAVSQU", "COLLOM")
###
# modifying TOTAL.FR to TOTALFR for fxn to work
# new name = old name
sem_focals_dat <- sem_focals_dat %>% rename(TOTALFR = TOTAL.FR)
# filtering dataframe for just nav and collom
nav_and_collom_only_sem <-  sem_focals_dat[sem_focals_dat$SPECIES %in% nav_and_collom, ]
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
nav_and_collom_only_sem
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if(!is.na(data[row, 'TOPFR']) & !is.na(data[row, 'SIDEFR'])){
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - data[row, "TOPFR"]) * data[row, 'SIDEFR']))
}
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
nav_and_collom_only_sem[nrow(nav_and_collom_only_sem$TOPFR), "TOPFR"]
# only want to apply the function to NAV and COLLOM
nav_and_collom <- c("NAVSQU", "COLLOM")
###
# modifying TOTAL.FR to TOTALFR for fxn to work
# new name = old name
sem_focals_dat <- sem_focals_dat %>% rename(TOTALFR = TOTAL.FR)
# filtering dataframe for just nav and collom
nav_and_collom_only_sem <-  sem_focals_dat[sem_focals_dat$SPECIES %in% nav_and_collom, ]
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
nav_and_collom_only_sem
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if(!is.na(data[row, 'TOPFR']) & !is.na(data[row, 'SIDEFR']) & (data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
if (!is.na(data[row, 'TOPFR']) & !is.na(data[row, 'SIDEFR'])) {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
# only want to apply the function to NAV and COLLOM
nav_and_collom <- c("NAVSQU", "COLLOM")
###
# modifying TOTAL.FR to TOTALFR for fxn to work
# new name = old name
sem_focals_dat <- sem_focals_dat %>% rename(TOTALFR = TOTAL.FR)
# filtering dataframe for just nav and collom
nav_and_collom_only_sem <-  sem_focals_dat[sem_focals_dat$SPECIES %in% nav_and_collom, ]
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if(!is.na(data[row, 'TOPFR']) & !is.na(data[row, 'SIDEFR']) & (data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
ifelse (!is.na(data[row, 'TOPFR']) & !is.na(data[row, 'SIDEFR'])) {
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if(!is.na(data[row, 'TOPFR']) & !is.na(data[row, 'SIDEFR']) & (data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
else if  (!is.na(data[row, 'TOPFR']) & !is.na(data[row, 'SIDEFR'])) {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if(!is.na(data[row, 'TOPFR']) & !is.na(data[row, 'SIDEFR']) & (data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
else if (!is.na(data[row, 'TOPFR']) & !is.na(data[row, 'SIDEFR'])) {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if(!is.na(data[row, 'TOPFR']) & !is.na(data[row, 'SIDEFR']) & (data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
else if () {
print(data[row, ])
print(nav_and_collom_only_sem[row, ])
print(is.na(nav_and_collom_only_sem[row, "TOPFR"]))
print(is.na(nav_and_collom_only_sem[row, "SIDEFR"]))
print(is.na(nav_and_collom_only_sem[0, "TOPFR"]))
print(is.na(nav_and_collom_only_sem[5, "TOPFR"]))
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if(!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR']) & (data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
else if (!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR'])) {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
# filtering dataframe for just nav and collom
nav_and_collom_only_sem <-  sem_focals_dat[sem_focals_dat$SPECIES %in% nav_and_collom, ]
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if(!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR']) && (data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
else if (!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR'])) {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if (row > nrow(data) || row < 1) {
stop("Invalid row index: Out of bounds.")
}
if(!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR']) && (data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
else if (!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR'])) {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if(!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR']) && (data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
# else if (!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR'])) {
#    return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
# }
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
#
# if(!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR']) && (data[row, "TOTALFR"] == 1)){
#   return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
# }
if (!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR'])) {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if((!is.na(data[row, 'TOPFR'])) && (!is.na(data[row, 'SIDEFR'])) && (data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
if (!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR'])) {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
nav_and_collom_only_sem[ 4, "TOPFR"]
nav_and_collom_only_sem[9, "TOPFR"]
nav_and_collom_only_sem[6, "TOPFR"]
nav_and_collom_only_sem[0, "TOPFR"]
nav_and_collom_only_sem[4, "TOPFR"]
nav_and_collom_only_sem[1, "TOPFR"]
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if((data[row, "TOTALFR"] == 1) && (!is.na(data[row, 'TOPFR'])) && (!is.na(data[row, 'SIDEFR']))){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
if (!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR'])) {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if((data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
if (!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR'])) {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if((data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
else if (!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR'])) {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
else{
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
nav_and_collom_only_sem[1, "TOTALFR"] == 1
nav_and_collom_only_sem[2, "TOTALFR"] == 1
nav_and_collom_only_sem[3, "TOTALFR"] == 1
nav_and_collom_only_sem[4, "TOTALFR"] == 1
nav_and_collom_only_sem[5, "TOTALFR"] == 1
nav_and_collom_only_sem[9, "TOTALFR"] == 1
nav_and_collom_only_sem[1, "TOTALFR"] == 1
nav_and_collom_only_sem
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if((data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
else if (!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR'])) {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
else (is.na(data[row, 'TOTALFR']) | is.na(data[row, "TOPFR"]) | is.na(data[row, "SIDEFR"])){
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if((data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
else if (!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR'])) {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
else if (is.na(data[row, 'TOTALFR']) | is.na(data[row, "TOPFR"]) | is.na(data[row, "SIDEFR"])){
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
}
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
nav_and_collom_only_sem[1, "TOTALFR"] == 1
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if (is.na(data[row, 'TOTALFR']) | is.na(data[row, "TOPFR"]) | is.na(data[row, "SIDEFR"])){
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
else if ((data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
else if (!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR'])) {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
}
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
nav_and_collom_only_sem
# this is creating a new column called new_fruit_count
unique(nav_and_collom_only_sem$new_fruit_count)
length(nav_and_collom_only_sem$new_fruit_count)
# this is creating a new column called new_fruit_count
unique(nav_and_collom_only_sem$new_fruit_count)
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
if (is.na(data[row, 'TOTALFR']) | is.na(data[row, "TOPFR"]) | is.na(data[row, "SIDEFR"])){
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
else if (!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR']) && (data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
else {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
}
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
nav_and_collom_only_sem
# this is creating a new column called new_fruit_count
unique(nav_and_collom_only_sem$new_fruit_count)
length(nav_and_collom_only_sem$new_fruit_count)
sum(nav_and_collom_only_sem$new_fruit_count == NA)
sum(is.na(nav_and_collom_only_sem$new_fruit_count))
rows_with_na <- nav_and_collom_only_sem[is.na(nav_and_collom_only_sem$new_fruit_count), ]
print(rows_with_na)
View(rows_with_na)
# doing the fruit count
calculate_new_fruit_count <- function(row, data){
# calculating the average side and tops in the function
average_top <- mean(data$TOPFR, na.rm = TRUE)
average_side <- mean(data$SIDEFR, na.rm = TRUE)
average_total_fruit <- mean(data$TOTALFR, na.rm = TRUE)
if (is.na(data[row, "TOTALFR"]) | is.na(data[row, "TOPFR"]) | is.na(data[row, "SIDEFR"])){
return(average_top + ((data[row, 'TOTALFR'] - 1) * average_side))
}
# TODO: need a statement to deal with if TOTALFR is NA
# returning some sort of average for Totalfruit too?
else if (!is.na(data[row, 'TOPFR']) && !is.na(data[row, 'SIDEFR']) && (data[row, "TOTALFR"] == 1)){
return (data[row, "TOPFR"] + data[row, 'SIDEFR'])
}
else {
return((data[row, 'TOPFR']) + ((data[row, "TOTALFR"] - 1) * data[row, 'SIDEFR']))
}
}
rows_with_na <- nav_and_collom_only_sem[nav_and_collom_only_sem$new_fruit_count) == 0]
rows_with_na <- nav_and_collom_only_sem[nav_and_collom_only_sem$new_fruit_count == 0]
# this is creating a new column called new_fruit_count
unique(nav_and_collom_only_sem$new_fruit_count)
rows_with_na <- nav_and_collom_only_sem[nav_and_collom_only_sem$new_fruit_count == 0.00000]
# applying function to the filtered nav/collom dataset and creating a column called 'new_fruit_count'
nav_and_collom_only_sem$new_fruit_count <- sapply(1:nrow(nav_and_collom_only_sem), function(row) calculate_new_fruit_count(row, nav_and_collom_only_sem))
# this is creating a new column called new_fruit_count
unique(nav_and_collom_only_sem$new_fruit_count)
rows_with_na <- nav_and_collom_only_sem[nav_and_collom_only_sem$new_fruit_count == 0.00000]
nav_and_collom_only_sem$new_fruit_count
# this is creating a new column called new_fruit_count
unique(nav_and_collom_only_sem$new_fruit_count)
rows_with_na <- nav_and_collom_only_sem[nav_and_collom_only_sem$new_fruit_count == 0.00000]
rows_with_na <- nav_and_collom_only_sem[nav_and_collom_only_sem$new_fruit_count == 0.00000, ]
print(rows_with_na)
# this is creating a new column called new_fruit_count
unique(nav_and_collom_only_sem$STEMS)
rows_with_na <- nav_and_collom_only_sem[nav_and_collom_only_sem$STEMS == 11, ]
rows_with_stems<- nav_and_collom_only_sem[nav_and_collom_only_sem$STEMS == 11, ]
print(rows_with_stems)
all_alones
all_alones <- read.csv("fitness alone focals(ALL alone focals).csv")
all_alones
unique(all_alones$notes)
unique(sem_focals_dat$notes)
sem_focals_dat
unique(sem_focals_dat$NOTES)
# TODO: Think about what to do about the rows with special notes like BT, BT no fruits?, couldn't find, BT Fruit gone (leaning towards just dropping these)
sem_focals_dat$NOTES[sem_focals_dat$NOTES != "", ]
# TODO: Think about what to do about the rows with special notes like BT, BT no fruits?, couldn't find, BT Fruit gone (leaning towards just dropping these)
sem_focals_dat[sem_focals_dat$NOTES != "", ]
sem_focals_dat
